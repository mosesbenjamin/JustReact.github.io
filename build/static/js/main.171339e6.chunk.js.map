{"version":3,"sources":["serviceWorker.js","About.js","Skills.js","Contact.js","MenuButton.js","Menu.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","About","href","Skills","Contact","MenuButton","onToggle","menuVisibility","className","id","onClick","Menu","visible","App","toggleMenu","setState","state","ButtonClicked","event","console","log","this","exact","to","path","component","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCSSC,EAzBD,WACb,OACC,6BACC,6BACa,qDACA,4CACA,gKACA,6CACZ,kIAGA,4eAIA,yDACA,wGACA,0EAA+C,uBAAGC,KAAK,YAAR,aAA/C,gDCTWC,EARA,WACd,OACC,6BACC,uCCKYC,EARC,WACf,OACC,6BACC,wCCaYC,G,MAfI,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,eAK9B,OAHIA,GACO,OAGT,6BACC,4BACAC,UAAaD,EACbE,GAAI,eACJC,QAASJ,OCQEK,G,MAlBF,SAAC,GAA8B,IAA7BL,EAA4B,EAA5BA,SACVM,EAAU,OAId,OAL0C,EAAlBL,iBAGvBK,EAAU,QAGT,yBAAKH,GAAG,aAAaD,UAAWI,EAASF,QAASJ,GACjD,2CACA,6BACA,2BAAG,uBAAGJ,KAAK,YAAR,aAAmC,6BACtC,2BAAG,uBAAGA,KAAK,YAAR,aAAmC,6BACtC,2BAAG,uBAAGA,KAAK,YAAR,aAAmC,6BACtC,2BAAG,uBAAGA,KAAK,YAAR,aAAmC,6BACtC,2BAAG,uBAAGA,KAAK,YAAR,aAAmC,gCC4B3BW,E,kDAnCd,aAAc,IAAD,8BACZ,gBAKDC,WAAa,WACZ,EAAKC,SAAS,CAACH,SAAU,EAAKI,MAAMJ,WAPxB,EASbK,cAAgB,SAACC,GAChB,EAAKJ,aACLK,QAAQC,IAAI,YATZ,EAAKJ,MAAQ,CACZJ,SAAS,GAHE,E,qDAcZ,OACC,kBAAC,IAAD,KACA,6BACC,kBAAC,EAAD,CAAYN,SAAWe,KAAKJ,gBAC5B,kBAAC,EAAD,CAAMX,SAAWe,KAAKJ,cAAeV,eAAgBc,KAAKL,MAAMJ,UAChE,wBAAIJ,UAAU,UACb,4BAAI,kBAAC,IAAD,CAASc,OAAK,EAACC,GAAG,KAAlB,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,WAAZ,WACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,aAEL,yBAAKf,UAAU,WACd,kBAAC,IAAD,CAAOc,OAAK,EAACE,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,UAAUC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,WAAWC,UAAWrB,W,GA5BrBsB,aCDlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.171339e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst About = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div>\r\n                <h2>Sunday Moses Benjamin</h2>\r\n                <p>Web Developer</p>\r\n                <p>A web developer from Lagos, Nigeria of considerable range. Codes, enjoys learning new languages, and an occassional set drummer. </p>\r\n                <h2>More About Me</h2>\r\n\t\t\t\t<p>\r\n\t\t\t\t\tI'm currently pursuing a degree in Mechanical Engineering from the prestigious University of Lagos. \r\n\t\t\t\t</p>\r\n\t\t\t\t<p>\r\n\t\t\t\tI got intereted in web development fairly recently, although I've been programming in python for a few years (since 2017). That and my newly found interest in web development created a spark to turn my hobby into a career. I took my first steps towards my new career in April 2019.\r\n\t\t\t\tI'm  a highly energetic and motivated person and I enjoy working as a team.I'm known for getting \"in the zone\" when concentrating on detailed work like programming or designing.\r\n\t\t\t\t</p>\r\n\t\t\t\t<h2>Objective of this website</h2>\r\n\t\t\t\t<p>I created this website with the intent of showcasing my work or projects.</p>\r\n\t\t\t\t<p>Don't hesitate to give me a feedback in the <a href=\"#contact\">`Contact`</a> section.\r\n\t\t\t\t\tI hope you enjoy what you find!\r\n\t\t\t\t</p>\r\n            </div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\nconst Skills = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Skills</p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Skills;","import React from 'react';\r\n\r\nconst Contact = ()=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<p>Contact</p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Contact;","import React from 'react'\r\nimport './MenuButton.css';\r\n\r\nconst MenuButton = ({onToggle, menuVisibility})=>{\r\n\tvar visible = 'hide';\r\n\tif (menuVisibility){\r\n\t\tvisible = 'show';\r\n\t}\r\n\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button \r\n\t\t\t\tclassName = {menuVisibility}\r\n\t\t\t\tid =\"squareButton\"  \r\n\t\t\t\tonClick={onToggle}></button> \r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default MenuButton;","import React from 'react'\r\nimport './Menu.css';\r\n\r\nconst Menu = ({onToggle, menuVisibility})=>{\r\n\tvar visible = 'hide';\r\n\tif (menuVisibility){\r\n\t\tvisible = 'show';\r\n\t}\r\n\treturn (\r\n\t\t\t<div id=\"flyoutMenu\" className={visible} onClick={onToggle}>\r\n\t\t\t\t<h2>My projects</h2>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<p><a href=\"#nowhere\">Project1</a></p><hr/>\r\n\t\t\t\t<p><a href=\"#nowhere\">Project2</a></p><hr/>\r\n\t\t\t\t<p><a href=\"#nowhere\">Project3</a></p><hr/>\r\n\t\t\t\t<p><a href=\"#nowhere\">Project4</a></p><hr/>\r\n\t\t\t\t<p><a href=\"#nowhere\">Project5</a></p><hr/>\r\n\t\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Menu;","import React, {Component} from 'react';\r\nimport {Route, NavLink, HashRouter} from 'react-router-dom';\r\nimport About from './About';\r\nimport Skills from './Skills';\r\nimport Contact from './Contact';\r\nimport MenuButton from './MenuButton';\r\nimport Menu from './Menu';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tvisible: false\r\n\t\t}\r\n\t}\r\n\ttoggleMenu = ()=>{\r\n\t\tthis.setState({visible: !this.state.visible})\t\r\n\t}\r\n\tButtonClicked = (event)=>{\r\n\t\tthis.toggleMenu();\r\n\t\tconsole.log(\"Clicked\");\r\n\t\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<HashRouter>\r\n\t\t\t<div>\r\n\t\t\t\t<MenuButton onToggle= {this.ButtonClicked} />\r\n\t\t\t\t<Menu onToggle= {this.ButtonClicked} menuVisibility={this.state.visible}/>\r\n\t\t\t\t<ul className=\"Header\">\r\n\t\t\t\t\t<li><NavLink exact to=\"/\" >About</NavLink></li>\r\n\t\t\t\t\t<li><NavLink to=\"/skills\" >Skills</NavLink></li>\r\n\t\t\t\t\t<li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n\t\t\t\t</ul>\r\n\t\t\t\t<div className=\"content\">\r\n\t\t\t\t\t<Route exact path=\"/\" component={About} />\r\n\t\t\t\t\t<Route path=\"/skills\" component={Skills} />\r\n\t\t\t\t\t<Route path=\"/contact\" component={Contact }/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</HashRouter>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}